#pragma once
#include <Windows.h>
#include <iostream>

class ExploitedDriver {
    private:
	    HANDLE DriverHandle = INVALID_HANDLE_VALUE;
        const char* ServicesDir = NULL;
        const char* SymbolicLink = NULL;
        char DriverFile[MAX_PATH] = { 0 };
        BOOL HasStarted = FALSE;

        BOOL RunBatFile(const char* Path) {
            HRESULT ComRes = CoInitializeEx(NULL, COINIT_APARTMENTTHREADED | COINIT_DISABLE_OLE1DDE);  // Initialize COM - cmd EXTs can depend on it
            HINSTANCE ExecRes = ShellExecuteA(NULL, "runas", Path, NULL, NULL, SW_FORCEMINIMIZE);
            CoUninitialize();
            if ((INT_PTR)ExecRes < 32) {
                printf("[-] Error occurred while trying to run batch file %s -> %llu\n", Path, (INT_PTR)ExecRes);
                return FALSE;
            }
            return TRUE;
        }

        BOOL CreateDriverService() {
            const char* BatFileName = "\\CreateService.bat";
            PVOID BatPath = malloc(strlen(ServicesDir) + strlen(BatFileName) + 1);
            if (BatPath == NULL) {
                printf("[-] Cannot create relative CreateService.bat file path for servicedir = %s\n", ServicesDir);
                return FALSE;
            }
            memcpy(BatPath, ServicesDir, strlen(ServicesDir));
            memcpy((PVOID)((ULONG64)BatPath + strlen(ServicesDir)), BatFileName, strlen(BatFileName) + 1);
            BOOL BatRes = RunBatFile((char*)BatPath);
            free(BatPath);
            return BatRes;
        }

    public:

        BOOL IsRunning() {
            return HasStarted;
        }

        void SetRunning(BOOL Runstat) {
            HasStarted = Runstat;
        }

        HANDLE GetDriverHandle() {
            return DriverHandle;
        }

        void SetDriverPath(const char* DriverPath) {
            RtlZeroMemory(DriverFile, MAX_PATH);
            memcpy(DriverFile, DriverPath, strlen(DriverPath) + 1);
        }

        void CloseDriverHandle() {
            CloseHandle(DriverHandle);
            DriverHandle = INVALID_HANDLE_VALUE;
        }

        BOOL OpenDriverHandle(BOOL UseSymbol) {
            if (UseSymbol) {
                DriverHandle = CreateFileA(SymbolicLink,
                    GENERIC_READ | GENERIC_WRITE,
                    FILE_SHARE_READ | FILE_SHARE_WRITE,
                    NULL,
                    OPEN_EXISTING,
                    FILE_ATTRIBUTE_NORMAL,
                    NULL);

                if (DriverHandle == INVALID_HANDLE_VALUE) {
                    printf("[-] Cannot get the handle for the driver file (Symbolic link used = %s) - %d\n", SymbolicLink, GetLastError());
                    return FALSE;
                }
            }
            else {
                DriverHandle = CreateFileA(DriverFile,
                    GENERIC_READ | GENERIC_WRITE,
                    FILE_SHARE_READ | FILE_SHARE_WRITE,
                    NULL,
                    OPEN_EXISTING,
                    FILE_ATTRIBUTE_NORMAL,
                    NULL);

                if (DriverHandle == INVALID_HANDLE_VALUE) {
                    printf("[-] Cannot get the handle for the driver file (Path to driver = %s) - %d\n", DriverFile, GetLastError());
                    return FALSE;
                }
            }
            return TRUE;
        }

        BOOL StartDriverService() {
            const char* BatFileName = "\\StartService.bat";
            PVOID BatPath = malloc(strlen(ServicesDir) + strlen(BatFileName) + 1);
            BOOL ClosedHandle = FALSE;
            if (BatPath == NULL) {
                printf("[-] Cannot create relative StartService.bat file path for servicedir = %s\n", ServicesDir);
                return FALSE;
            }
            memcpy(BatPath, ServicesDir, strlen(ServicesDir));
            memcpy((PVOID)((ULONG64)BatPath + strlen(ServicesDir)), BatFileName, strlen(BatFileName) + 1);
            
            BOOL CreateRes = CreateDriverService();
            if (!CreateRes) {
                return FALSE;
            }

            if (DriverHandle != INVALID_HANDLE_VALUE) {
                printf("[!] Closing open driver handle temporarly to start service, opening back soon..\n");
                ClosedHandle = TRUE;
                CloseDriverHandle();
            }
            Sleep(150);  // Without this - not started, about minimum
            BOOL BatRes = RunBatFile((char*)BatPath);
            Sleep(150);  // Without this - not started, about minimum
            free(BatPath);
            if (BatRes) {
                HasStarted = TRUE;
            }
            else {
                HasStarted = FALSE;
            }

            if (ClosedHandle) {
                OpenDriverHandle(NULL);
            }
            return BatRes;
        }

        BOOL DeleteDriverService() {
            const char* BatFileName = "\\DeleteService.bat";
            PVOID BatPath = malloc(strlen(ServicesDir) + strlen(BatFileName) + 1);
            if (BatPath == NULL) {
                printf("[-] Cannot create relative DeleteService.bat file path for servicedir = %s\n", ServicesDir);
                return FALSE;
            }
            memcpy(BatPath, ServicesDir, strlen(ServicesDir));
            memcpy((PVOID)((ULONG64)BatPath + strlen(ServicesDir)), BatFileName, strlen(BatFileName) + 1);
            BOOL BatRes = RunBatFile((char*)BatPath);
            free(BatPath);
            if (DriverHandle != INVALID_HANDLE_VALUE) {
                CloseDriverHandle();
            }
            HasStarted = FALSE;
            return BatRes;
        }

        BOOL InitiateDriverService(const char* ServicesRelPath, const char* DriverPath, const char* SymbolLink) {
            ServicesDir = ServicesRelPath;
            SymbolicLink = SymbolLink;
            SetDriverPath(DriverPath);
            HasStarted = FALSE;
            return TRUE;
        }
};